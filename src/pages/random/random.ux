<template>
  <div class="page" @swipe="toHomePage">
    <!-- <text class="time">{{ time }}</text> -->
    <!-- <image class="back" src="/common/icon/back.png" @click="back"></image> -->
    
    <div class="container">
      <!-- 进度显示 -->
      <text class="progress">{{currentIndex + 1}}/{{totalQuestions}}</text>
      
      <!-- 单词卡片 -->
      <div class="word-card" @click="toggleAnswer">
        <text class="word">{{ showAnswer ? currentWord.meaning : currentWord.word }}</text>
        <!-- <text class="hint">{{ showAnswer ? "点击显示单词" : "点击显示释义" }}</text> -->
      </div>
      
      <!-- 下一题按钮 -->
      <input
        class="{{showAnswer ? 'btn next-btn' : 'btn next-btn-disabled'}}"
        type="button"
        value="下一题"
        @click="nextQuestion"
      />
    </div>
  </div>
</template>

<script>
import router from "@system.router";
import data1 from "../../common/data/data1.js";
import data2 from "../../common/data/data2.js";
import data3 from "../../common/data/data3.js";
import data4 from "../../common/data/data4.js";

export default {
  private: {
    time: "00:00",
    allWords: [],
    currentWord: {word: "加载中...", meaning: "请稍等"},
    currentIndex: 0,
    totalQuestions: 10,
    showAnswer: false
  },
  
  onInit() {
    this.initWordData();
    this.startQuiz();
    
    const updateTime = () => {
      const date = new Date();
      const hour = date.getHours().toString().padStart(2, "0");
      const minute = date.getMinutes().toString().padStart(2, "0");
      this.time = hour + ":" + minute;
    };
    updateTime();
    this.timer = setInterval(updateTime, 60000);
  },
  
  onDestroy() {
    clearInterval(this.timer);
  },
  
  // 初始化单词数据
  initWordData() {
    const allData = {
      ...data1,
      ...data2,
      ...data3,
      ...data4
    };
    
    this.allWords = [];
    
    // 遍历所有分组
    Object.keys(allData).forEach(key => {
      const wordText = allData[key];
      const lines = wordText.split('\n');
      
      lines.forEach(line => {
        if (line.trim()) {
          // 使用更精确的解析方法
          // 格式: "1.personal_adj.个人的"
          const match = line.match(/^(\d+)\.([^_]+)_([^\.]+)\.(.+)$/);
          if (match) {
            const [, number, word, pos, meaning] = match;
            this.allWords.push({
              word: word.trim(),
              pos: pos.trim(),
              meaning: meaning.trim()
            });
          } else {
            // 备用解析方法
            const parts = line.split('.');
            if (parts.length >= 3) {
              // 第一个部分是序号，第二个部分是单词+词性，第三个部分是释义
              const numberPart = parts[0];
              const wordPosPart = parts[1];
              const meaningPart = parts.slice(2).join('.');
              
              // 分离单词和词性
              const wordPosMatch = wordPosPart.match(/^([^_]+)_(.+)$/);
              if (wordPosMatch) {
                const [, word, pos] = wordPosMatch;
                this.allWords.push({
                  word: word.trim(),
                  pos: pos.trim(),
                  meaning: meaningPart.trim()
                });
              }
            }
          }
        }
      });
    });
    
    console.log("解析到的单词数量:", this.allWords.length);
  },
  
  // 开始测验
  startQuiz() {
    this.currentIndex = 0;
    this.showAnswer = false;
    this.getRandomWord();
  },
  
  // 获取随机单词
  getRandomWord() {
    if (this.allWords.length === 0) {
      this.currentWord = {word: "暂无单词数据", meaning: "请检查数据文件"};
      return;
    }
    
    const randomIndex = Math.floor(Math.random() * this.allWords.length);
    this.currentWord = this.allWords[randomIndex];
    this.showAnswer = false;
    
    console.log("当前单词:", this.currentWord);
  },
  
  // 切换显示答案
  toggleAnswer() {
    this.showAnswer = !this.showAnswer;
  },
  
  // 下一题
  nextQuestion() {
    if (this.currentIndex < this.totalQuestions - 1) {
      this.currentIndex++;
      this.getRandomWord();
    } else {
      // 测验完成
      this.currentWord = {
        word: "测验完成",
        meaning: "点击重新开始"
      };
      this.showAnswer = true;
      this.currentIndex = 0;
    }
  },
  
  toHomePage(eve) {
    if (eve.direction === "right") {
      router.back();
    }
  },
  back() {
    router.replace({
      uri: "/pages/index"
    })
  },
}
</script>

<style>
.page {
  background-color: #000000;
  flex: 1;
  height: 100%;
  width: 100%;
  flex-direction: column;
}

.time {
  position: absolute;
  top: 20px;
  left: 70px;
  z-index: 20;
  width: 200px;
  height: 50px;
  background: rgba(0, 0, 0, 0.7);
  font-size: 42px;
  font-weight: 600;
  color: rgba(255, 255, 255, 0.5);
  text-align: center;
  line-height: 50px;
  border-radius: 12px;
}

.back {
  position: absolute;
  left: 120px;
  top: 12px;
  width: 72px;
  height: 72px;
  opacity: 0.5;
}

.container {
  flex: 1;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  padding: 100px 20px 80px 20px;
}

.progress {
  font-size: 32px;
  color: #ffffff;
  font-weight: bold;
  margin-bottom: 20px;
}

.word-card {
  width: 324px;
  height: 280px;
  border-radius: 25px;
  background-color: rgba(38, 38, 38, 1);
  border: 3px solid rgba(255, 255, 255, 0.15);
  align-items: center;
  justify-content: center;
  padding: 30px;
  margin-bottom: 40px;
}

.word {
  font-size: 38px;
  color: #ffffff;
  text-align: center;
  margin-bottom: 20px;
  line-height: 50px;
}

.hint {
  font-size: 22px;
  color: #c5c5c5;
  text-align: center;
  margin-top: 15px;
}

.btn {
  width: 240px;
  height: 70px;
  border-radius: 18px;
  font-size: 28px;
  color: #ffffff;
  opacity: 1;
  margin-bottom: 20px;
}

.next-btn {
  background-color: rgba(100, 100, 255, 0.4);
  border: 2px solid rgba(100, 100, 255, 0.6);
}

.next-btn-disabled {
  background-color: rgba(128, 128, 128, 0.3);
  border: 2px solid rgba(128, 128, 128, 0.5);
  color: rgba(255, 255, 255, 0.5);
}
</style>